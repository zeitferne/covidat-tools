[build-system]
requires = ["hatchling>=1.14"]
build-backend = "hatchling.build"

[project]
name = "covidat"
dynamic = ["version"]
description = 'Tooling for covidat-data'
readme = "README.md"
requires-python = ">=3.11"
license = "Apache-2.0"
keywords = []
authors = [
  { name = "Christian", email = "138394851+zeitferne@users.noreply.github.com" },
]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
  "pandas",
  "numpy",
  "dateparser",
  "lxml",
  "beautifulsoup4",
  "openpyxl",
  "xlrd",
  "odfpy"
]

[project.optional-dependencies]
notebooks = [
  "colorcet",
  "matplotlib",
  "seaborn",
  "scipy",
  "jupyterlab",
  "nbconvert"
]

[project.scripts]
dldata = "covidat.dldata:main"
collectshortage = "covidat.collectshortage:main"
collecthydro = "covidat.collecthydro:main"
collectsvat = "covidat.collectsvat:main"

[project.urls]
Documentation = "https://github.com/zeitferne/covidat-tools#readme"
Issues = "https://github.com/zeitferne/covidat-tools/issues"
Source = "https://github.com/zeitferne/covidat-tools"

[tool.hatch.env]
requires = ["hatch-pip-compile"]

[tool.hatch.version]
path = "src/covidat/__about__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/covidat"]

[tool.hatch.envs.default]
pip-compile-resolver = "uv"
pip-compile-installer = "uv"
installer = "uv"
type = "pip-compile"
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[tool.hatch.envs.notebooks]
pip-compile-resolver = "uv"
pip-compile-installer = "uv"
installer = "uv"
type = "pip-compile"
pip-compile-constraint = "default"
template = "notebooks"
features = ["notebooks"]

[tool.hatch.envs.notebooks.scripts]
serve = "jupyter lab notebooks/monitoring.ipynb"

[tool.hatch.envs.lint]
detached = true
pip-compile-resolver = "uv"
pip-compile-installer = "uv"
installer = "uv"
type = "pip-compile"
dependencies = [
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive  {args:--strict src}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "black {args:.}",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py311"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py311"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  #"D",  # pydocstyle
  #"ANN",  # flake8-annotations
  "ASYNC",  # flake8-async
  "DTZ",
  "E",
  #"EM",
  "F",
  "FBT",
  "G",  # flake8-logging-format
  "FLY",  # static-join-to-f-string
  "I",
  "ICN",
  "ISC",
  "N",
  "PL",
  # "PERF",  # Perflint
  "Q",
  "RUF",
  "RET",
  "PD",
  "S",
  "SIM",
  "T",
  "TID",
  "UP",
  #"NPY"
  "W",
  "YTT",
  "COM818",  # trailing-comma-on-bare-tuple
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",

  "PD002",   # inplace=True is OK
  "PD010",   # pandas-use-of-dot-pivot-or-unstack

  "T20", # print is OK
  "S101", # assert is OK

  "TID252", # relative imports are OK

  "S603", # subprocess.call w/o shell
  "S607", # start-process-with-partial-path
  "FBT002", # Boolean default value in function definition
]
unfixable = [
  #"F401",   # Don't touch unused imports
]

[tool.ruff.isort]
known-first-party = ["covidat"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.flake8-builtins]
builtins-ignorelist = ["format"]

[tool.coverage.run]
source_pkgs = ["covidat", "tests"]
branch = true
parallel = true
omit = [
  "src/covidat/__about__.py",
]

[tool.coverage.paths]
covidat = ["src/covidat", "*/covidat/src/covidat"]
tests = ["tests", "*/covidat/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
